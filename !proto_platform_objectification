player prisoner1;
//player prisoner2;

void setup() {
  background(100, 150, 255);
  size(300, 400);
  prisoner1 = new player(color(120, 120, 120), float 30.0, float 30.0, float 0.0, float rtrue);
  //prisoner2
}

void draw() {
  background(30);
  prisoner1.control()
    prisoner1.display();
  }

  class player() {
    color skin;
    float xpos;
    float ypos;
    player(color skin);
    float tempXpos;
    float tempYpos;
    float tempXspeed
    boolean tempControl;
    
      //colour, x,y, speed, control?)
    player(color tempC, float tempXpos, float tempYpos, float tempXspeed, boolean tempControl) {
      skin = tempC;
      xpos = tempXpos;
      ypos = tempYpos;
      xspeed = tempXspeed;
      control = tempControl;
    }

    void display() {
      strokeWeight(2);
      stroke(255);
      fill(c);
      rectMode(CENTER);
      rect(xpos, ypos, 20, 10);
    }

    void control() {
      {
        if (keyPressed == true && control == true) {

          if (right) {
            playerXmove++;
          }  
          if (left) {
            playerXmove--;
          } 
          if (up) {
            playerYmove--;
          }
          //if (down) {
            //playerYmove++;
          //}  

          if (!up && playerYmove < ground-80) {
            playerYmove++;
          }
        }  


        //controls
        void keyPressed() {
          if (key =='d') {
            //playerXmove--;
            right = true;
          }
          if (key == 'a') {
            //playerXmove++;
            left = true;
          }
          if (key == 'w') {
            //playerYmove--;
            up = true;
          }
          if (key == 's') {
            //playerYmove++;
            down = true;
          }
        }


        void keyReleased() {
          if (key =='d') {
            //playerXmove--;
            right = false;
          }
          if (key == 'a') {
            //playerXmove++;
            left = false;
          }
          if (key == 'w') {
            //playerYmove--;
            up = false;
          }

          if (key == 's') {
            //playerYmove++;
            down = false;
          }
        }



        //Impliment: coordinates, control(0,2) playing, following, rescued.


        /*float playerXmove = 0; // 
         float playerYmove = 0; // 
         boolean right = false;
         boolean left = false;
         boolean up = false;
         boolean down = false;
         boolean gravity = true;
         float ground = 250;
         
         
         //add down cancel, so it doesn't go underground.
         //add inertia 
         
         void setup(){
         size(600,250);
         }
         
         void draw(){
         background(100,150,250);
         fill(250,250,250);
         rectMode(CORNER);
         rect(-1,ground,802,101); 
         
         fill(250,50,50);
         rect(playerXmove,playerYmove,40,80);
         
         if(right){
         playerXmove++; 
         }  
         if(left){
         playerXmove--;
         } 
         if(up){
         playerYmove--;
         }
         if(down){
         playerYmove++; 
         }  
         
         if(!up && playerYmove < ground-80){
         playerYmove++;
         }
         
         
         }  
         
         
         //controls
         void keyPressed(){
         if (key =='d'){
         //playerXmove--;
         right = true;
         }
         if(key == 'a'){
         //playerXmove++;
         left = true;
         }
         if(key == 'w'){
         //playerYmove--;
         up = true;
         }
         if(key == 's'){
         //playerYmove++;
         down = true;
         }
         }
         
         
         void keyReleased(){
         if (key =='d'){
         //playerXmove--;
         right = false;
         }
         if(key == 'a'){
         //playerXmove++;
         left = false;
         }
         if(key == 'w'){
         //playerYmove--;
         up = false;
         
         }
         
         if(key == 's'){
         //playerYmove++;
         down = false;
         }
         }
         
         */
